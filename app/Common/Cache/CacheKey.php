<?php /** @noinspection PhpUnhandledExceptionInspection */

namespace App\Common\Cache;

use App\Common\Traits\CacheRedisHelper;
use App\Common\Traits\CacheSerializable;
use App\Jobs\DelayDeleteRedis;
use Closure;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Redis;

/**
 * <b>Do not edit this file</b>
 * @see CacheKeyEnum
 */
class CacheKey
{
    use CacheSerializable, CacheRedisHelper;

    private \Redis $connection;
    private string $prefix;
    private string $key;
    private string $fullKey;

    public function __construct(CacheKeyEnum $key, int|string ...$v)
    {
        $this->connection = Redis::connection('cache')->client();
        $this->prefix = Cache::getPrefix();
        $this->key = vsprintf($key->value, $v);
        $this->fullKey = $this->prefix . $this->key;
    }

    public function delete(): bool
    {
        dispatch(new DelayDeleteRedis($this->fullKey));
        return $this->connection->del($this->fullKey);
    }

    public function has(): bool
    {
        return $this->connection->exists($this->fullKey);
    }

    public function increment(float|int $increment = 1, ?int $ttl = null): bool|float|int
    {
        if (is_int($increment)) {
            if ($increment > 0) {
                $result = $this->connection->incrBy($this->fullKey, $increment);
            }
            if ($increment < 0) {
                $result = $this->connection->decrBy($this->fullKey, $increment);
            }
        }
        if (is_float($increment)) {
            if ($increment > 0) {
                $result = $this->connection->incrByFloat($this->fullKey, $increment);
            }
            if ($increment < 0) {
                $result = $this->connection->decrByFloat($this->fullKey, $increment);
            }
        }
        if (isset($result) && $ttl) {
            $this->connection->expire($this->fullKey, $ttl);
            return $result;
        }
        return $result ?? false;
    }

    public function remember(Closure $callback, int $ttl = 300): mixed
    {
        $value = $this->get('THIS_IS_A_DEFAULT_VALUE_THAT_WILL_NEVER_BE_RETURNED_BY_ANY_FUNCTION');
        if ($value != 'THIS_IS_A_DEFAULT_VALUE_THAT_WILL_NEVER_BE_RETURNED_BY_ANY_FUNCTION') {
            return $value;
        }
        $value = $callback();
        $this->set($value, $ttl);
        return $value;
    }

    public function get(mixed $default = null): mixed
    {
        $value = $this->connection->get($this->fullKey);
        return $value ? $this->unserialize($value) : $default;
    }

    public function set(mixed $value, int $ttl): bool
    {
        $result = $this->connection->set($this->fullKey, $this->serialize($value));
        if ($ttl) {
            $this->connection->expire($this->fullKey, $ttl);
        }
        return $result;
    }
}
